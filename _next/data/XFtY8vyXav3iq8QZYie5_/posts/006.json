{"pageProps":{"post":{"title":"低予算デスゲームの話","date":"2024-03-25","slug":"006","content":"<h2 id=\"tldr\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#tldr\"><span class=\"icon icon-link\"></span></a>TL;DR</h2>\n<p>いろんな方法で後撮り音声のリップシンクを試みたよ。うまくいったりいかなかったりしたよ。</p>\n<h2 id=\"はじめに\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#はじめに\"><span class=\"icon icon-link\"></span></a>はじめに</h2>\n<p>デスゲームをやってみたい！！というわけで、おあつらえ向きにサークル合宿幹事の機会が与えられたのでやってみることにしました。<br>\n普段からデスゲームの主催者っぽい風格のある部員Aに協力してもらい、次のようなシナリオを立てます。\n<img src=\"../../assets/blog/006/7.png\" alt=\"image\"></p>\n<p>① 全員が部屋に集められる<br>\n② 突然電気が消えてテレビ画面からデスゲームの主催者が登場。ルール説明。<br>\n③ 殺し合い（レクリエーション）</p>\n<p>本来であればどこかのスタジオでも借りて生中継をしたかったわけですが、予算とか場所とかの都合で「事前にカラオケのコンセプトルームで動画を撮って当日流す」というところに落ち着きました。</p>\n<h2 id=\"カラオケbox特有のノイズ問題\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#カラオケbox特有のノイズ問題\"><span class=\"icon icon-link\"></span></a>カラオケBOX特有のノイズ問題</h2>\n<p>カラオケのコンセプトルームは一般的なスタジオと比べて非常に安いのが嬉しい点ですが、録画音声に結構な騒音が乗ります。それをソフトウェア制御で何とかしよう　というのが今回のテーマです。<br>\n</p>\n<p>※ なお、プライバシーの都合上「音声がこう変わりました！」みたいな例はこの記事には載りません。</p>\n<h2 id=\"直接ノイズを取り除く方針\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#直接ノイズを取り除く方針\"><span class=\"icon icon-link\"></span></a>直接ノイズを取り除く方針</h2>\n<p>いつも通り、それっぽいモデルを探しに hugging face を見に行きます。今回お世話になったのはSpeechBrain さんの <a href=\"https://huggingface.co/speechbrain?search_models=sepformer\">sepformerシリーズ</a>です。（ちなみにpython3.8でも3.12でも動かなかったので3.10を新たに入れる羽目になりました。）</p>\n<p>結論から言うと、かなり微妙な出力でした。モデルによって大分出力が違いましたが、声が全部消えるかノイズが全部乗るかのどちらかでした。SN比が大きいことに加え、カラオケのノイズはもっぱら別の人の歌声なので分離がしにくいのかもしれません。</p>\n<h2 id=\"後撮りした音声を合成する方針\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#後撮りした音声を合成する方針\"><span class=\"icon icon-link\"></span></a>後撮りした音声を合成する方針</h2>\n<p>当初の思惑が外れたため、部員Aに土下座して音声だけ後撮りしてもらい、元動画と上手いことリップシンクする方向性で頑張ります。\n<img src=\"../../assets/blog/006/3.png\" alt=\"image\"></p>\n<h3 id=\"メルスペクトログラムと伸縮マッチングを用いたマッチング\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#メルスペクトログラムと伸縮マッチングを用いたマッチング\"><span class=\"icon icon-link\"></span></a>メルスペクトログラムと伸縮マッチングを用いたマッチング</h3>\n<h4 id=\"メルスペクトログラムとは\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#メルスペクトログラムとは\"><span class=\"icon icon-link\"></span></a>メルスペクトログラムとは</h4>\n<p>短い区間の周波数スペクトルを時間方向で積んだものをスペクトログラムと呼びます。人間の聴覚特性により近い特徴量となるように周波数をlogスケールにしたものがメルスペクトログラムです。\n<img src=\"../../assets/blog/006/2.png\" alt=\"image\"></p>\n<p>実際の音声に対するメルスペクトログラムはこんな感じ。\n<img src=\"../../assets/blog/006/1.png\" alt=\"image\">\n「また、東寺のように、五大明王と呼ばれる主要な明王の中央に配されることも多い」 - jvs corpus</p>\n<h4 id=\"伸縮マッチングとは\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#伸縮マッチングとは\"><span class=\"icon icon-link\"></span></a>伸縮マッチングとは</h4>\n<p>dpマッチングとも呼ばれます。ある系列を部分的に伸縮して別の系列にするような場合で、最もそれらしいマッチングを見つける問題です。詳しくは<a href=\"https://web.tuat.ac.jp/~tuatmcc/contents/monthly/200207/DP.xml\">この辺の記事</a>が分かりやすいです。\n<img src=\"../../assets/blog/006/4.png\" alt=\"image\"></p>\n<p>隣接（斜めを含む）するマスに辺を張り、そのコストを「向かう先のマスの嬉しくなさ（類似度に対して単調現象する指標）<code class=\"language-math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>c</mi></mrow><annotation encoding=\"application/x-tex\">c</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">c</span></span></span></span></code>＋位置ずれコスト<code class=\"language-math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi></mrow><annotation encoding=\"application/x-tex\">d</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">d</span></span></span></span></code>」として、左上から右下への最短経路問題を解くことで、良い感じに類似度の高いところを選択しながら進むルートが得られます。\nちなみに、最短経路は<code class=\"language-math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo separator=\"true\">,</mo><mi>j</mi><mo stretchy=\"false\">]</mo><mo>=</mo><mi>m</mi><mi>i</mi><mi>n</mi><mo stretchy=\"false\">(</mo><mi>d</mi><mi>p</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">[</mo><mi>j</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">]</mo><mo>+</mo><mi>c</mi><mo separator=\"true\">,</mo><mi>d</mi><mi>p</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo><mo>+</mo><mi>c</mi><mo>+</mo><mi>d</mi><mo separator=\"true\">,</mo><mi>d</mi><mi>p</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">[</mo><mi>j</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">]</mo><mo>+</mo><mi>c</mi><mo>+</mo><mi>d</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">dp[i,j] = min( dp[i-1][j-1]+c , dp[i-1][j]+c+d , dp[i][j-1]+c+d)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">p</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">min</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">p</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">p</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">p</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mclose\">)</span></span></span></span></code>という単純なdpで求めることができ、これがdpマッチングと呼ばれる所以です。\n<img src=\"../../assets/blog/006/6.png\" alt=\"image\"></p>\n<h4 id=\"メルスペクトログラムの各時間セクションに対して類似度を計算\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#メルスペクトログラムの各時間セクションに対して類似度を計算\"><span class=\"icon icon-link\"></span></a>メルスペクトログラムの各時間セクションに対して類似度を計算</h4>\n<p>元動画の音声と後撮り音声のそれぞれについてメルスペクトログラムを計算し、正規化した後に行列の内積を取ると「音声1のi番目の時間セクションと音声2のj番目の時間セクションのcos類似度」の行列ができます。\n<img src=\"../../assets/blog/006/5.png\" alt=\"image\">\n非常にうっすらとですが斜めに走る線を確認できます。類似度が高い（より黄色い）マスは同じような音を発しているという仮説に立てば、黄色い線をうまいことなぞるルートで時間マッチングを行うことで適切なリップシンクが得られます。</p>\n<p>ただ、カラオケBOXでのセリフと家での後撮りだと声の質がそれなりに異なることもあり、大きくマッチングを外す事例も複数ありました。</p>\n<h3 id=\"文字起こしを用いたマッチング\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#文字起こしを用いたマッチング\"><span class=\"icon icon-link\"></span></a>文字起こしを用いたマッチング</h3>\n<p>最近の音声認識AIは優秀で、多少ノイズが大きくてもちゃんと言ってる内容（とタイムスタンプ）を検出してくれます。<br>\nで、タイムスタンプさえ分かれば適当に音声を伸縮させれば（少なくとも文字単位では）リップシンクができます。ただし、2つの音声の文字起こしが完全に一致していることが前提であり、1文字でもずれるとこちら側で修正を掛けなくてはいけないという嬉しくなさがあり、また、無音区間の扱いや文字と文字の間にやや不自然な切れ目が生まれるなど、上手くいく例と行かない例が顕著に分かれました。</p>\n<h3 id=\"部員aに頑張ってもらう\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#部員aに頑張ってもらう\"><span class=\"icon icon-link\"></span></a>部員Aに頑張ってもらう</h3>\n<p>後から知ったのですが、後撮りを送ってもらう際、気を聞かせて元の動画とリップシンクを合わせようとしてくれていました。それゆえ、録音区間によっては直接音声を張るのが（変な加工を行わない分）一番自然な合成になる　という状況がそれなりにありました。</p>\n<h2 id=\"結論\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#結論\"><span class=\"icon icon-link\"></span></a>結論</h2>\n<p>様々な手法を試しましたが結局万能な手法は存在せず、複数手法のうまくいってる部分を手動で切り貼りして合成するという手段を取りました。技術者としての敗北を感じます。</p>\n<h2 id=\"おまけ\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#おまけ\"><span class=\"icon icon-link\"></span></a>おまけ</h2>\n<p>デスゲームのadmin側の醍醐味として「突然の出来事で右往左往する参加者を別室から優雅に眺める」があります。<br>\n時間と予算が限られる中、私物のパソコン2台とスマホ1台を組み合わせて実現を試みました。\n<img src=\"../../assets/blog/006/8.png\" alt=\"image\">\n宿に到着後、宿のWIFI環境があまりに貧弱で大変な目にあったというのが今回のオチです。</p>","ogImage":{"url":"/assets/blog/006/thumbnail.png"},"coverImage":"/assets/blog/006/thumbnail.png","excerpt":"伸縮マッチングを利用した後撮り音声のリップシンク","tags":["小ネタ"]}},"__N_SSG":true}